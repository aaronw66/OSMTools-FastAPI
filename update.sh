#!/bin/bash

# È°πÁõÆÁõÆÂΩï
PROJECT_DIR="/opt/compose-conf/tools"
CONTAINER_NAME="tools-osmtools-1"

cd "$PROJECT_DIR" || { echo "‚ùå Directory $PROJECT_DIR not found"; exit 1; }

# ËøòÂéüÂÖ≥ÈîÆË∑üË∏™Êñá‰ª∂
echo "üîÑ Resetting requirements.txt and update.sh to remote version..."
git checkout -- requirements.txt update.sh

# ÊãâÂèñÊúÄÊñ∞‰ª£Á†Å
echo "üì• Pulling latest code from GitHub..."
git fetch origin
git reset --hard origin/main

# ‰øùÁïô type/ Âíå logs/ ÁõÆÂΩï‰∏≠ÁöÑÊñá‰ª∂Ôºå‰∏çÂà†Èô§
echo "üßπ Cleaning other untracked files except type/ and logs/..."
git clean -fd -e type -e logs

# ÊûÑÂª∫ Docker Compose Âπ∂ÂêØÂä®
echo "üî® Building Docker Compose services and starting..."
docker-compose -f docker-compose.yml up -d --build

# Êü•ÁúãÂÆπÂô®Áä∂ÊÄÅ
echo ""
echo "üìä Current container status:"
docker-compose -f docker-compose.yml ps

# Á≠âÂæÖÂêØÂä®ÂÆåÊàê - ÁÆÄÂçïËΩÆËØ¢ÊñπÂºè
echo ""
echo "‚è≥ Waiting for service to start..."

TIMEOUT=120
ELAPSED=0

while [ $ELAPSED -lt $TIMEOUT ]; do
    if docker logs "$CONTAINER_NAME" 2>&1 | grep -q "Application startup complete"; then
        echo ""
        echo "‚úÖ Service startup complete! (took ${ELAPSED}s)"
        echo ""
        exit 0
    fi
    echo -n "."
    sleep 2
    ELAPSED=$((ELAPSED + 2))
done

echo ""
echo "‚ö†Ô∏è  Timeout after ${TIMEOUT} seconds"
echo "Check logs with: docker logs -f $CONTAINER_NAME"
exit 1